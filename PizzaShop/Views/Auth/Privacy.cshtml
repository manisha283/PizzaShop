@* @{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>

1. Backend (Controller - ManageUsersController.cs)
(A) Fetch User List - AJAX Endpoint
Create an API endpoint that returns paginated and filtered user data in JSON format.

csharp
Copy
Edit
<div>
[HttpGet]
public IActionResult GetUsers(string search = "", int page = 1, int pageSize = 10)
{
    var users = _userService.GetAllUsers(); // Fetch all users from DB

    if (!string.IsNullOrEmpty(search))
    {
        users = users.Where(u => 
            u.FirstName.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            u.LastName.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            u.Email.Contains(search, StringComparison.OrdinalIgnoreCase) ||
            u.Role.Contains(search, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    int totalUsers = users.Count();
    var paginatedUsers = users.Skip((page - 1) * pageSize).Take(pageSize).ToList();

    return Json(new { data = paginatedUsers, totalUsers, page, pageSize });
}

(B) Delete User - AJAX Endpoint
This will allow users to be deleted via AJAX.

csharp
Copy
Edit
[HttpPost]
public IActionResult DeleteUser(int id)
{
    var user = _userService.GetUserById(id);
    if (user == null)
    {
        return Json(new { success = false, message = "User not found" });
    }

    _userService.DeleteUser(id);
    return Json(new { success = true, message = "User deleted successfully" });
}
2. Frontend (View - Users.cshtml)
(A) HTML Structure
html
Copy
Edit
<div class="container mt-4">
    <!-- Search Bar -->
    <div class="d-flex justify-content-between mb-3">
        <input type="text" id="searchInput" class="form-control w-25" placeholder="Search users...">
    </div>

    <!-- User List Table -->
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="userTableBody"></tbody>
    </table>

    <!-- Pagination Controls -->
    <div class="d-flex justify-content-between">
        <button id="prevPage" class="btn btn-secondary">Previous</button>
        <span id="paginationInfo"></span>
        <button id="nextPage" class="btn btn-secondary">Next</button>
    </div>
</div>
(B) AJAX Script (wwwroot/js/users.js)
js
Copy
Edit
$(document).ready(function () {
    let currentPage = 1;
    let pageSize = 10;

    function loadUsers(page, search = "") {
        $.ajax({
            url: "/ManageUsers/GetUsers",
            type: "GET",
            data: { search: search, page: page, pageSize: pageSize },
            success: function (response) {
                let users = response.data;
                let totalUsers = response.totalUsers;

                let tableBody = $("#userTableBody");
                tableBody.empty();

                if (users.length === 0) {
                    tableBody.append("<tr><td colspan='5' class='text-center'>No users found</td></tr>");
                    return;
                }

                users.forEach(user => {
                    tableBody.append(`
                        <tr>
                            <td>${user.firstName}</td>
                            <td>${user.lastName}</td>
                            <td>${user.email}</td>
                            <td>${user.role}</td>
                            <td>
                                <a href="/ManageUsers/EditUser/${user.id}" class="btn btn-primary">Edit</a>
                                <button class="btn btn-danger delete-user" data-id="${user.id}">Delete</button>
                            </td>
                        </tr>
                    `);
                });

                // Update pagination info
                $("#paginationInfo").text(`Page ${response.page} of ${Math.ceil(totalUsers / pageSize)}`);

                // Enable/Disable buttons
                $("#prevPage").prop("disabled", response.page === 1);
                $("#nextPage").prop("disabled", response.page * pageSize >= totalUsers);
            }
        });
    }

    // Initial Load
    loadUsers(currentPage);

    // Search event
    $("#searchInput").on("keyup", function () {
        let searchQuery = $(this).val();
        currentPage = 1;
        loadUsers(currentPage, searchQuery);
    });

    // Pagination events
    $("#prevPage").on("click", function () {
        if (currentPage > 1) {
            currentPage--;
            loadUsers(currentPage, $("#searchInput").val());
        }
    });

    $("#nextPage").on("click", function () {
        currentPage++;
        loadUsers(currentPage, $("#searchInput").val());
    });

    // Delete user event
    $(document).on("click", ".delete-user", function () {
        let userId = $(this).data("id");

        if (confirm("Are you sure you want to delete this user?")) {
            $.ajax({
                url: "/ManageUsers/DeleteUser",
                type: "POST",
                data: { id: userId },
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        loadUsers(currentPage, $("#searchInput").val());
                    } else {
                        alert(response.message);
                    }
                }
            });
        }
    });
});
3. Include the JavaScript File in Users.cshtml
html
Copy
Edit
<script src="~/js/users.js"></script>
4. Summary of Features
✅ AJAX-based User List – No full-page reloads.
✅ Search Filter – Users can be searched dynamically.
✅ Pagination – Users can navigate between pages.
✅ Delete User – Users can be removed via AJAX.



Now that you have an EmailService using MailKit, let's integrate it into the User Module so that when a new user is created, they receive an email with their login credentials.

1. Configure Email Settings (appsettings.json)
Make sure you add the SMTP settings in your appsettings.json:

json
Copy
Edit
"EmailSettings": {
  "FromEmail": "your-email@example.com",
  "Host": "smtp.gmail.com",
  "Port": 587,
  "UserName": "your-email@example.com",
  "Password": "your-email-password"
}
2. Register Email Service in Dependency Injection (Program.cs / Startup.cs)
In Program.cs, register the EmailService:

csharp
Copy
Edit
builder.Services.Configure<EmailSettings>(builder.Configuration.GetSection("EmailSettings"));
builder.Services.AddTransient<IEmailService, EmailService>();
3. Modify User Service to Send Email on New User Creation
In your UserService.cs (or wherever you handle user creation):

csharp
Copy
Edit
public class UserService : IUserService
{
    private readonly IEmailService _emailService;
    private readonly ApplicationDbContext _context;

    public UserService(ApplicationDbContext context, IEmailService emailService)
    {
        _context = context;
        _emailService = emailService;
    }

    public async Task<bool> CreateUserAsync(AddUserViewModel model)
    {
        var user = new User
        {
            FirstName = model.FirstName,
            LastName = model.LastName,
            Email = model.Email,
            UserName = model.UserName,
            Role = model.Role,
            Password = GenerateRandomPassword() // Generate a random password
        };

        _context.Users.Add(user);
        await _context.SaveChangesAsync();

        // Send email with credentials
        string subject = "Welcome to Our System";
        string body = $@"
            <h3>Hello {user.FirstName},</h3>
            <p>Your account has been created successfully. Here are your login credentials:</p>
            <p><b>Username:</b> {user.UserName}</p>
            <p><b>Password:</b> {user.Password}</p>
            <p>Please change your password after login.</p>
            <p>Regards,<br>Admin Team</p>
        ";

        await _emailService.SendEmailAsync(user.Email, subject, body);

        return true;
    }

    private string GenerateRandomPassword()
    {
        return Guid.NewGuid().ToString().Substring(0, 8); // Simple random password
    }
}
4. Call CreateUserAsync from the Controller
In ManageUsersController.cs:

csharp
Copy
Edit
[HttpPost]
public async Task<IActionResult> AddUser(AddUserViewModel model)
{
    if (!ModelState.IsValid)
    {
        return View(model);
    }

    bool result = await _userService.CreateUserAsync(model);

    if (result)
    {
        TempData["Success"] = "User added successfully and email sent!";
        return RedirectToAction("UserList");
    }

    TempData["Error"] = "Something went wrong!";
    return View(model);
}
5. Frontend Confirmation Message
Modify Users.cshtml to show success messages:

html
Copy
Edit
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}
✅ Final Outcome
When an admin adds a new user, an email with login credentials is automatically sent.
The email includes username & password and a recommendation to change the password.
This ensures a smooth onboarding experience for new users in your system. 🚀


User Module Implementation
Edit User Form with Validation (Frontend + Backend)
Soft Delete User (Backend)
1️⃣ Edit User Form with Validation
(A) Frontend Validation in EditUser.cshtml
Add client-side validation using jQuery and Bootstrap:

html
Copy
Edit
<form id="editUserForm">
    <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <input type="text" class="form-control" id="firstName" name="FirstName" required>
        <div class="invalid-feedback">First Name is required.</div>
    </div>

    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name</label>
        <input type="text" class="form-control" id="lastName" name="LastName" required>
        <div class="invalid-feedback">Last Name is required.</div>
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="Email" required readonly>
    </div>

    <div class="mb-3">
        <label for="role" class="form-label">Role</label>
        <select class="form-select" id="role" name="Role" required>
            <option value="">Select Role</option>
            <option value="Admin">Admin</option>
            <option value="User">User</option>
        </select>
        <div class="invalid-feedback">Please select a role.</div>
    </div>

    <button type="submit" class="btn btn-primary">Update User</button>
</form>

<script>
    $(document).ready(function () {
        $("#editUserForm").submit(function (e) {
            if (!this.checkValidity()) {
                e.preventDefault();
                $(this).addClass("was-validated");
            }
        });
    });
</script>
(B) Backend Validation in ASP.NET Core (EditUser API)
Modify UserController.cs:

csharp
Copy
Edit
[HttpPost]
public async Task<IActionResult> EditUser(EditUserViewModel model)
{
    if (!ModelState.IsValid)
    {
        return View(model);
    }

    var user = await _context.Users.FindAsync(model.Id);
    if (user == null)
    {
        return NotFound();
    }

    user.FirstName = model.FirstName;
    user.LastName = model.LastName;
    user.Role = model.Role;
    
    _context.Users.Update(user);
    await _context.SaveChangesAsync();

    TempData["Success"] = "User updated successfully!";
    return RedirectToAction("UserList");
}
2️⃣ Soft Delete User Implementation
(A) Modify User Model
Modify the User entity to add a IsDeleted flag:

csharp
Copy
Edit
public class User
{
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public string Role { get; set; }
    public bool IsDeleted { get; set; } = false; // Soft delete flag
}
(B) Soft Delete User in UserService.cs
Instead of permanently deleting the user, update the IsDeleted flag:

csharp
Copy
Edit
public async Task<bool> SoftDeleteUserAsync(int userId)
{
    var user = await _context.Users.FindAsync(userId);
    if (user == null)
    {
        return false;
    }

    user.IsDeleted = true;
    _context.Users.Update(user);
    await _context.SaveChangesAsync();
    return true;
}
(C) Soft Delete API in UserController.cs
Modify DeleteUser API:

csharp
Copy
Edit
[HttpPost]
public async Task<IActionResult> DeleteUser(int id)
{
    bool result = await _userService.SoftDeleteUserAsync(id);
    
    if (!result)
    {
        return Json(new { success = false, message = "User not found!" });
    }

    return Json(new { success = true, message = "User deleted successfully!" });
}

 *@
