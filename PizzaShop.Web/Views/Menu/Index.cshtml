@model PizzaShop.Entity.ViewModels.MenuViewModel;

@{
    ViewData["Title"] = "Menu";
    Layout = "_Layout";
}

<!-- Menu heading -->
<div class="mb-3">
    <h1 class="blue-text">Menu</h1>
</div>

<!-- Items and Modifiers heading tab starts-->
<div class="row bg-white px-3 pt-2 mx-0 mb-3 d-flex flex-row">
    <ul class="nav nav-pills" id="pills-tab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active d-flex align-items-center" id="items-tab" data-bs-toggle="pill"
                data-bs-target="#pills-home" type="button" role="tab" aria-controls="pills-home" aria-selected="true">
                <img src="~/images/icons/items.svg" alt="" width="25px" class="me-2">
                <span class="fs-5 tab-text">Items</span>
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link d-flex align-items-center" id="modifier-tab" data-bs-toggle="pill"
                data-bs-target="#pills-profile" type="button" role="tab" aria-controls="pills-profile"
                aria-selected="false">
                <img src="~/images/icons/modifiers.svg" alt="" width="20px" class="me-2">
                <span class="fs-5 tab-text">Modifiers</span>
            </button>
        </li>
    </ul>
</div>
<!-- Items and Modifiers heading tab ends-->

<!-- Items tab start -->
<div class="row bg-white mx-0 mb-3 d-flex flex-row">

    <div class="tab-content" id="pills-tabContent">

        <!-----------------------------------------------------Category and Items -----------------------------------------------------------------------------------
        ----------------------------------------------------------------------------------------------------------------------------------------------------->
        <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab"
            tabindex="0">
            <div class="row">

                <!----------------------------------------------------- Category starts ------------------------------------------------------->
                <div class="category col-12 col-md-3 pt-2 bg-dark-grey">

                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <span class="fs-5 fw-bold blue-text">Category</span>
                        <!-- Button trigger modal -->
                        <button type="button" class="btn p-0" data-bs-toggle="modal" data-bs-target="#addCategory">
                            <img src="~/images/icons/plus-square.svg" alt="" width="25px">
                        </button>
                    </div>

                    <div class="category-list pe-1">
                        <ul class="pe-1" id="ul-category">

                            @foreach (var category in Model.Categories)
                            {
                                <li class="d-flex justify-content-between li-category" data-id="@category.CategoryId">
                                    <a class="d-flex align-items-center">
                                        <img src="~/images/icons/grid-3x2.svg" class="grid-img" id="">
                                        <span class="categoryName">@category.CategoryName</span>
                                    </a>
                                    <div class="EditDeleteCategory">
                                        <button class="btn p-0 pe-1 iconEditCategory" data-bs-toggle="modal"
                                            data-bs-target="#editCategory" data-id="@category.CategoryId">
                                            <img src="~/images/icons/edit.svg" alt="" />
                                        </button>
                                        <button class="btn p-0 pe-1 iconDeleteCategory" data-bs-toggle="modal"
                                            data-bs-target="#deleteCategory" data-id="@category.CategoryId">
                                            <img src="~/images/icons/delete.svg" alt="">
                                        </button>
                                    </div>
                                </li>
                            }

                        </ul>
                    </div>
                </div>
                <!----------------------------------------------------- Category ends  ------------------------------------------------------->

                <!----------------------------------------------------- Items starts ------------------------------------------------------>
                <div class="col pt-2" id="Items-Content">
                    <div class="fs-5 fw-bold blue-text">
                        Items
                    </div>

                    <div class="d-flex justify-content-end">
                        <div class="input-group w-25 me-2">
                            <input type="search" class="form-control" placeholder="Search" name="search"
                                id="searchItem">
                            <button type="submit" class="input-group-text"> <img src="~/images/icons/search.svg" alt="">
                            </button>
                        </div>
                        <button class="btn border me-2" id="itemMassDeleteIcon" data-bs-toggle="modal"
                            data-bs-target="#massDeleteItem">
                            <img src="~/images/icons/delete.svg" alt="">
                        </button>
                        <button class="btn btn-blue me-2 newItemBtn" id="newItemBtn" data-bs-toggle="modal"
                            data-bs-target="#addEditItem">
                            + New Item
                        </button>
                    </div>

                    <div id="itemTableOuter">
                        <!-- Items Partial View -->
                    </div>

                </div>
                <!----------------------------------------------------- Items ends ------------------------------------------------------->

            </div>
        </div>

        <!----------------------------------------------------- Modifiers and Modifier Group-----------------------------------------------------------------------------------
        ----------------------------------------------------------------------------------------------------------------------------------------------------->
        <div class="tab-pane fade" id="pills-profile" role="tabpanel" aria-labelledby="pills-profile-tab" tabindex="0">
            <div class="row" id="modifierTab">
                <!-- Partial View -->
            </div>
        </div>


    </div>


</div>
<!-- Items tab ends -->


<!--------------------------------------Modals------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------->
<!-- Modal Add Category starts -->
<div class="modal fade" id="addCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5 grey-text" id="staticBackdropLabel">Add Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="AddCategory" asp-controller="Menu" method="Post">
                <div class="modal-body">
                    <div class="form">
                        <input asp-for="CategoryVM.CategoryName" type="text" class="form-control mb-3"
                            placeholder="Name">
                        <textarea asp-for="CategoryVM.CategoryDesc" class="form-control" rows="3"
                            placeholder="Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-blue btn-modal" id="saveAddCategory">Save</button>
                    <button type="button" class="btn btn-white btn-modal" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal Add Category ends -->

<!-- Modal Edit Category starts -->
<div class="modal fade" id="editCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5 grey-text" id="staticBackdropLabel">Edit Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="EditCategory" asp-controller="Menu" method="Post">
                <div class="modal-body">
                    <div class="form">
                        <input asp-for="CategoryVM.CategoryId" id="modalCategoryId" value="" hidden>
                        <input asp-for="CategoryVM.CategoryName" type="text" class="form-control mb-3"
                            id="modalCategoryName" placeholder="Name">
                        <textarea asp-for="CategoryVM.CategoryDesc" class="form-control" rows="3" id="modalCategoryDesc"
                            placeholder="Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-blue btn-modal" id="saveEditCategory">Save</button>
                    <button type="button" class="btn btn-white btn-modal" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal Edit Category ends -->

<!-- Modal Delete Category starts-->
<div class="modal fade" id="deleteCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Delete Confirmation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column justify-content-center align-items-center">
                <img src="~/images/icons/warning.svg" alt="" width="50px">
                <span>Are you sure you want to delete this category?</span>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                <button type="button" id="confirmDelete" class="btn btn-blue btn-modal"
                    data-bs-dismiss="modal">YES</button>
                <button type="button" class="btn btn-white btn-modal">NO</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal Delete Category ends-->

<!-- Modal Add/Update Item satrts here-->
<div class="modal fade" id="addItem" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5 grey-text" id="staticBackdropLabel">Edit Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="EditCategory" asp-controller="Menu" method="Post">
                <div class="modal-body">
                    <div class="form">
                        <input asp-for="CategoryVM.CategoryId" id="modalCategoryId" value="" hidden>
                        <input asp-for="CategoryVM.CategoryName" type="text" class="form-control mb-3"
                            id="modalCategoryName" placeholder="Name">
                        <textarea asp-for="CategoryVM.CategoryDesc" class="form-control" rows="3" id="modalCategoryDesc"
                            placeholder="Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-blue btn-modal" id="saveEditCategory">Save</button>
                    <button type="button" class="btn btn-white btn-modal" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal Add/Update Item ends here-->





@section Scripts {

    @* Javascript for Category *@
    <script>
        //For showing edit and delete icons on hovering 
        $(".li-category").mouseover(function () {
            $(this).children("div.EditDeleteCategory").css("visibility", "visible");
        });
        $(".li-category").mouseout(function () {
            $(this).children("div.EditDeleteCategory").css("visibility", "hidden");
        });

        //For edit Category 
        let categoryId;
        $(".iconEditCategory").click(function () {
            categoryId = $(this).data("id");
            $("#modalCategoryId").val(categoryId);

            $.ajax({
                url: '@Url.Action("EditCategory", "Menu")',
                type: "GET",
                data: { categoryId: categoryId },
                success: function (response) {
                    $("#modalCategoryName").val(response.categoryName);
                    $("#modalCategoryDesc").val(response.categoryDesc)
                }
            });
        });

        $(".iconDeleteCategory").click(function () {
            categoryId = $(this).data("id");
        });

        $("#confirmDelete").click(function () {
            $.ajax({
                url: '@Url.Action("SoftDelete", "Menu")',
                type: "GET",
                data: { categoryId: categoryId },
                success: function (response) {
                    console.log("Category with id ", categoryId, " is deleted.");
                },
                error: function () {
                    console.log("error input deleting user");
                }
            });
        });

        $('#uploadImage').change(function () {
            let file = this.files[0];
            $('#showUploadImageName').text(file.name);
        });

        //for Soft Delete of Items
        let itemId;
        $(document).on("click", ".deleteItemIcon", function () {
            itemId = $(this).data("id");
            console.log("Item id is ", itemId);
        });

        $(document).on("click", "#SoftDeleteItem", function () {
            $.ajax({
                url: '@Url.Action("SoftDeleteItem", "Menu")',
                type: "POST",
                data: { id: itemId },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message)
                        setTimeout(function () {
                            location.reload();
                        },000);
                    }
                    else {
                        toastr.error(response.message)
                    }
                },
                error: function () {
                    console.log("Item not deleted!");
                }
            });
        });


        @* this is Pagination of items *@
            $(".li-category>a").on("click", function () {
                categoryId = $(this).parent().data("id");
                $(".li-category").each(function () {
                    $(this).children().removeClass("blue");
                });
                $(this).addClass("blue");

                ItemsPaginationAjax(1);
            });

        $(document).ready(function () {
            categoryId = $("#ul-category>li:first").data("id");
            $("#ul-category>li:first>a").addClass("blue");
            ItemsPaginationAjax(1); // Load users on page load
        });

        $(document).on("change", "#itemsPerPage", function () {
            ItemsPaginationAjax(1); // Reload data with new page size
        });

        $(document).on("input", "#searchItem", function () {
            ItemsPaginationAjax(1); // Reload data with new page size
        });


        function ItemsPaginationAjax(pageNumber) {
            if (!pageNumber) {
                pageNumber = @((Model?.ItemsPageVM?.Page?.CurrentPage ?? 1));
            }
            let pageSize = $("#itemsPerPage").val() || 5; // Default to 5 if no value selected
            let searchItem = $("#searchItem").val();
            $.ajax({
                url: "/Menu/GetItems",
                data: {
                    'categoryId': categoryId,
                    'pageSize': pageSize,
                    'pageNumber': pageNumber,
                    'search': searchItem
                },
                type: "GET",
                dataType: "html",
                success: function (data) {
                    $("#itemTableOuter").html(data);
                    $("#itemsPerPage").val(pageSize); // Reapply selected value after reload
                },
                error: function () {
                    console.log("There is error.Not successful");
                    alert("No Items Found");
                    $("#itemsListContent").html('An error has occurred');
                }
            });


            $(document).on("click", "#newItemBtn", function () {
                loadAddEditModal(0);
            });

            $(document).on("click", ".editItemBtn", function () {
                loadAddEditModal($(this).data("id"));
                console.log("itemId id on clicking icons ", $(this).data("id"));
            });

            function loadAddEditModal(id) {
                $.ajax({
                    url: '@Url.Action("GetItemModal", "Menu")',
                    type: "GET",
                    data: { itemId: id },
                    dataType: "html",
                    success: function (data) {
                        $("#addEditItemModal").html(data);
                        modifierGroupList = [];
                        $(".modifierGroupDetail").each(function () {
                            modifierGroupList.push(Number($(this).data("id")));
                        });
                    },
                    error: function () {
                        console.log("There is error.Not successful");
                        alert("No Items Found");
                        $("#itemsListContent").html('An error has occurred');
                    }
                });
            }



        }
    </script>

    @* Intermediate Checkbox For Items Script*@
    <script>

        $(document).ready(function () {
            $("#itemMassDeleteIcon").prop("disabled", true);
        });

        function toggleMasterDeleteBtn() {
            if ($(".itemChildCheckbox:checked").length > 0) {
                $("#itemMassDeleteIcon").prop("disabled", false);
            }
            else {
                $("#itemMassDeleteIcon").prop("disabled", true);
            }
        }

        $(document).on("change", "#itemParentCheckbox", function () {
            $(".itemChildCheckbox").each(function () {
                $(this).prop("checked", $("#itemParentCheckbox").prop("checked"));
            });
            toggleMasterDeleteBtn();
        });

        $(document).on("change", ".itemChildCheckbox", function () {
            let totalChildCheckBox = $(".itemChildCheckbox").length;
            let checkedChildCheckBox = $(".itemChildCheckbox:checked").length;
            if (checkedChildCheckBox === totalChildCheckBox) {
                $("#itemParentCheckbox").prop("indeterminate", false).prop("checked", true);
            }
            else if (checkedChildCheckBox === 0) {
                $("#itemParentCheckbox").prop("indeterminate", false).prop("checked", false);
            }
            else {
                $("#itemParentCheckbox").prop("indeterminate", true);
            }
            toggleMasterDeleteBtn();
        });

        //For mass delete of Items
        let itemList = [];
        $(document).on("click", "#itemMassDeleteIcon", function () {
            $(".itemChildCheckbox:checked").each(function () {
                itemList.push($(this).data("id"));
            });
        });

        $(document).on("click", "#confirmMassDeleteItem", function () {
            $.ajax({
                url: '@Url.Action("MassDeleteItems", "Menu")',
                type: "POST",
                data: { itemsList: itemList },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message)
                        setTimeout(function () {
                            location.reload();
                        }, 3000);
                    }
                    else {
                        toastr.error(response.message)
                    }
                },
                error: function () {
                    console.log("Item not deleted!");
                }
            });
        });

    </script>

    @* Select Modifier in items *@
    <script>

        let modifierGroupList = [];
        $(document).on("change", "#selectModifierGroup", function () {
            let modifierGroupId = $(this).val();
            if (modifierGroupList.indexOf(Number(modifierGroupId)) === -1) {
                modifierGroupList.push(Number(modifierGroupId));
                getSelectedModifierGroup(modifierGroupId);
            }
            $("#selectModifierGroup").val("-1");
        });

        $(document).on("click", ".deselectModifierGroup", function () {
            let modifierGroupId = $(this).data("id");
            console.log("delete modifier group id is", modifierGroupId);
            modifierGroupList = $.grep(modifierGroupList, function (element) {
                return element != modifierGroupId;
            });
            $("div").remove(".modifierGroupDetail[data-id ='" + modifierGroupId + "']")
        });

        function getSelectedModifierGroup(id) {
            $.ajax({
                url: '@Url.Action("SelectModifierGroup", "Menu")',
                type: "GET",
                data: { modifierGroupId: id },
                dataType: "html",
                success: function (data) {
                    $("#showModifierGroup").append(data);
                },
                error: function () {
                    console.log("There is error in fetching modifier group.Not successful");
                }
            });
        }

    </script>

    @* Add/Update Item Form Submit *@
    <script>
        $(document).on("submit", "#AddUpdateItemForm", function (e) {
            e.preventDefault();

            let modifiergroupArr = [];

            $(".modifierGroupDetail").each(function () {
                let id = $(this).data("id");
                modifiergroupArr.push({
                    ModifierGroupId: id,
                    MinAllowed: Number($(".minAllowed[data-id ='" + id + "']").val()),
                    MaxAllowed: Number($(".maxAllowed[data-id ='" + id + "']").val())
                });
            });

            $("#modifierGroupList").val(JSON.stringify(modifiergroupArr));

            let formData = new FormData(this);

            $.ajax({
                url: $(this).attr("action"),
                type: $(this).attr("method"),
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    $("#addEditItem").hide;
                    toastr.success("Item Added successfully!");
                    setTimeout(function () {
                        location.reload();
                    }, 3000);
                },
                error: function () {
                    console.log("There is error.Not successful");
                    alert("No Items Found");
                    $("#itemsListContent").html('An error has occurred');
                }
            });

        });
    </script>

    @* Get Modifier Tab *@
    <script>
        $(document).on("click", "#modifier-tab", function () {
            console.log("Modifier Tab");
            getModifierTab();
        });

        function IntializeModifier() {
            currentMgId = $("#ul-modifierGroup>li:first").data("id");
            $("#ul-modifierGroup>li:first>a").addClass("blue");
            console.log("document ready", currentMgId);
            ModifiersPaginationAjax(1); // Load modifiers on page load
        }

        function getModifierTab() {
            $.ajax({
                url: '@Url.Action("GetModifierTab", "Menu")',
                type: "GET",
                dataType: "html",
                success: function (data) {
                    $("#modifierTab").html(data);
                    IntializeModifier();
                },
                error: function () {
                    console.log("There is error in fetching modifier tab.Not successful");
                }
            });
        }
    </script>

    @* Add Modifier Group Modal *@
    <script>
        $(document).on("click", "#addModifierGroupBtn", function () {
            GetModifierGroup(0);
        });

        $(document).on("click", ".editModifierGroupBtn", function () {
            console.log("Modifier Group id on clicking icons ", $(this).data("id"));
            GetModifierGroup($(this).data("id"));
        });

        function GetModifierGroup(id) {
            $.ajax({
                url: '@Url.Action("GetModifierGroupModal", "Menu")',
                type: "GET",
                data: { modifierGroupId: id },
                dataType: "html",
                success: function (data) {
                    $("#addModifierGroupModal").html(data);
                    selectedModifierList = [];
                    $(".spanModifier").each(function(){
                        selectedModifierList.push({ id: $(this).data("id"), name: $(this).data("name") });
                        
                    });
                },
                error: function () {
                    console.log("There is error.Not successful");
                    alert("No Modifier Group Found");
                }
            })
        }
    </script>

    @* Add/Update Modifier Group Form Submit *@
    <script>
        $(document).on("submit", "#SaveModifierGroupForm", function (e) {
            e.preventDefault();

            let modifierList = [];
            $(".spanModifier").each(function(){
                modifierList.push($(this).data("id"));
            });

            $("#modifierList").val(JSON.stringify(modifierList));

            $.ajax({
                url: $(this).attr("action"),
                type: $(this).attr("method"),
                data: $(this).serialize(),
                success: function (data) {
                    $("#addEditItem").hide;
                    toastr.success("Modifier Group Added successfully!");
                    setTimeout(function () {
                        location.reload();
                    }, 3000);
                },
                error: function () {
                    console.log("There is error.Not successful");
                }
            });
        });
    </script>

    @* Add Existing Modifiers in Modifier Group *@
    <script>
        $(document).on("click", "#addExistingModifiers", function () {
            console.log("inside click function");
            existingModifiers(1); // Reload data with new page size
        })

        $(document).on("change", "#existingModifiersPerPage", function () {
            existingModifiers(1); // Reload data with new page size
        });

        $(document).on("input", "#searchExistingModifier", function () {
            existingModifiers(1); // Reload after serach query
        });

        function existingModifiers(pageNumber) {
            let pageSize = $("#existingModifiersPerPage").val() || 5; // Default to 5 if no value selected

            let searchQuery = $("#searchExistingModifier").val();
            if (searchQuery == null) {
                searchQuery = ""
            }

            $.ajax({
                url: '@Url.Action("ExistingModifiers", "Menu")',
                data: {
                    'search': searchQuery,
                    'pageSize': pageSize,
                    'pageNumber': pageNumber
                },
                type: "GET",
                dataType: "html",
                success: function (data) {
                    $("#existingModifiersContent").html(data);
                    $("#existingModifiersPerPage").val(pageSize); // Reapply selected value after reload
                    checkSelectedModifier();
                },
                error: function () {
                    alert("No Modifier Found");
                    $("#existingModifiersContent").html('An error has occurred');
                }
            });

        }
    </script>

    @* Intermediate Checkbox For Existing Modifiers*@
    <script>

        $(document).on("change", "#existingModifierParentCb", function () {
            $(".existingModifierChildCb").each(function () {
                $(this).prop("checked", $("#existingModifierParentCb").prop("checked")).trigger("change");
            });
            masterModifierDeleteBtn();
        });

        $(document).on("change", ".existingModifierChildCb", function () {
            let totalChildCheckBox = $(".existingModifierChildCb").length;
            let checkedChildCheckBox = $(".existingModifierChildCb:checked").length;
            if (checkedChildCheckBox === totalChildCheckBox) {
                $("#existingModifierParentCb").prop("indeterminate", false).prop("checked", true);
            }
            else if (checkedChildCheckBox === 0) {
                $("#existingModifierParentCb").prop("indeterminate", false).prop("checked", false);
            }
            else {
                $("#existingModifierParentCb").prop("indeterminate", true);
            }
            toggleMasterDeleteBtn();
        });

        //For mass selection of Modifiers in modifier group
        let selectedModifierList = [];
        $(document).on("change", ".existingModifierChildCb", function () {
            let modifierId = $(this).data("id");
            let modifierName = $(this).data("name");

            if (!selectedModifierList.some(i => i.id == modifierId)) {
                selectedModifierList.push({ id: modifierId, name: modifierName });
            }
            else {
                selectedModifierList = selectedModifierList.filter(i => i.id !== modifierId)
            }
        });

        //Add Selected Modifier
        $(document).on("click", "#addModifierToGroup", function () {
            $("#selectMod").empty();
            $.each(selectedModifierList, function (index, modifier) {
                $("#selectMod").append(` 
                    <span class="spanModifier d-flex align-items-center border rounded-5 px-2" data-id="${modifier.id}" data-name="${modifier.name}">
                        <span class="p-1 fw-semibold text-grey" data-id="${modifier.id}">${modifier.name}</span>
                        <button type="button" class="btn-close fs-6" aria-label="Close" data-id="${modifier.id}"></button>
                    </span>
                `)
            })
        })

        //checked selected modifiers
        function checkSelectedModifier(){
            $(".existingModifierChildCb").each(function(){
                if(selectedModifierList.some(i => i.id === $(this).data("id")))
                {
                    $(this).prop("checked",true);
                }
            })
        }

        //remove selected modifier
        $(document).on("click",".deselectModifier",function(){
            let id = $(this).data("id");
            selectedModifierList = selectedModifierList.filter(i => i.id !== id);
            $("span").remove(".spanModifier[data-id = '"+id+"']");
        })


    </script>

    @* Delete Modifier Group *@
    <script>
        let deleteMgId;
        $(document).on("click", ".deleteMgBtn", function () {
            deleteMgId = $(this).data("id");
        });

        $(document).on("click", "#confirmDeleteMg", function () {
            $.ajax({
                url: '@Url.Action("DeleteModifierGroup", "Menu")',
                type: "POST",
                data: { modifierGroupId: deleteMgId },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message)
                        getModifierTab();
                    }
                    else {
                        toastr.error(response.message)
                    }
                },
                error: function () {
                    console.log("Modifier group not deleted!");
                }
            });
        });
    </script>

    @* Modifiers List Pagination Partial View Ajax *@
    <script>
        let currentMgId;
        $(document).on("click", ".li-modifierGroup>a", function () {
            currentMgId = $(this).parent().data("id");
            $(".li-modifierGroup").each(function () {
                $(this).children().removeClass("blue");
            });
            $(this).addClass("blue");

            ModifiersPaginationAjax(1);
        });

        $(document).on("change", "#modifiersPerPage", function () {
            ModifiersPaginationAjax(1); // Reload data with new page size
        });

        $(document).on("input", "#searchModifier", function () {
            ModifiersPaginationAjax(1); // Reload after serach query
        });

        function ModifiersPaginationAjax(pageNumber) {
            let pageSize = $("#modifiersPerPage").val() || 5; // Default to 5 if no value selected

            let searchQuery = $("#searchModifier").val();
            if (searchQuery == null) {
                searchQuery = ""
            }

            $.ajax({
                url: '@Url.Action("GetModifiersList", "Menu")',
                data: {
                    'modifierGroupId': currentMgId,
                    'search': searchQuery,
                    'pageSize': pageSize,
                    'pageNumber': pageNumber
                },
                type: "GET",
                dataType: "html",
                success: function (data) {
                    $("#modifierTableOuter").html(data);
                    $("#modifiersPerPage").val(pageSize); // Reapply selected value after reload
                },
                error: function () {
                    alert("No Modifier Found");
                    $("#modifierTableOuter").html('An error has occurred');
                }
            });

        }
    </script>

    @* Add Modifier Modal *@
    <script>
        $(document).on("click", "#addModifierBtn", function () {
            GetModifier(0);
        });

        $(document).on("click", ".editModifierBtn", function () {
            console.log("Modifier id on clicking icons ", $(this).data("id"));
            GetModifier($(this).data("id"));
        });

        function GetModifier(id) {
            $.ajax({
                url: '@Url.Action("GetModifierModal", "Menu")',
                type: "GET",
                data: { modifierId: id },
                dataType: "html",
                success: function (data) {
                    console.log(data);
                    $("#addModifierModal").html(data);
                },
                error: function () {
                    console.log("There is error.Not successful");
                    alert("No Modifier Found");
                }
            })
        }
    </script>

    @* Add/Update Modifier Form Submit *@
    <script>
        $(document).on("submit", "#SaveModifierForm", function (e) {
            e.preventDefault();

            $.ajax({
                url: $(this).attr("action"),
                type: $(this).attr("method"),
                data: $(this).serialize(),
                success: function (data) {
                    $("#addModifier").hide;
                    toastr.success("Modifier Added successfully!");
                    setTimeout(function () {
                        location.reload();
                    }, 3000);
                },
                error: function () {
                    console.log("There is error.Not successful");
                }
            });
        });
    </script>

    @* Intermediate Checkbox For Modifiers*@
    <script>

        $(document).ready(function () {
            $("#modifierMassDeleteBtn").prop("disabled", true);
        });

        function masterModifierDeleteBtn() {
            if ($(".modifierChildCheckbox:checked").length > 0) {
                $("#modifierMassDeleteBtn").prop("disabled", false);
            }
            else {
                $("#modifierMassDeleteBtn").prop("disabled", true);
            }
        }

        $(document).on("change", "#modifierParentCheckbox", function () {
            $(".modifierChildCheckbox").each(function () {
                $(this).prop("checked", $("#modifierParentCheckbox").prop("checked"));
            });
            masterModifierDeleteBtn();
        });

        $(document).on("change", ".modifierChildCheckbox", function () {
            let totalChildCheckBox = $(".modifierChildCheckbox").length;
            let checkedChildCheckBox = $(".modifierChildCheckbox:checked").length;
            if (checkedChildCheckBox === totalChildCheckBox) {
                $("#modifierParentCheckbox").prop("indeterminate", false).prop("checked", true);
            }
            else if (checkedChildCheckBox === 0) {
                $("#modifierParentCheckbox").prop("indeterminate", false).prop("checked", false);
            }
            else {
                $("#modifierParentCheckbox").prop("indeterminate", true);
            }
            toggleMasterDeleteBtn();
        });

        //For mass delete of Modifiers
        let deleteModifierIdList = [];
        $(document).on("click", "#modifierMassDeleteBtn", function () {
            $(".modifierChildCheckbox:checked").each(function () {
                deleteModifierIdList.push($(this).data("id"));
            });
        });

        $(document).on("click", "#confirmMassDeleteModifier", function () {
            $.ajax({
                url: '@Url.Action("MassDeleteModifiers", "Menu")',
                type: "POST",
                data: {
                    'modifierIdList': deleteModifierIdList,
                    'modifierGroupId': currentMgId,
                },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message)
                        ModifiersPaginationAjax(1);
                    }
                    else {
                        toastr.error(response.message)
                    }
                },
                error: function () {
                    console.log("Modifier not deleted!");
                }
            });
        });

    </script>

    @* Delete Modifier  *@
    <script>
        let deleteModifierId;
        $(document).on("click", ".deleteModifierBtn", function () {
            deleteModifierId = $(this).data("id");
            console.log("Modifier id is ", deleteModifierId);
        });

        $(document).on("click", "#confirmDeleteModifier", function () {
            $.ajax({
                url: '@Url.Action("DeleteModifier", "Menu")',
                type: "POST",
                data:
                {
                    'modifierId': deleteModifierId,
                    'modifierGroupId': currentMgId
                },
                success: function (response) {
                    if (response.success) {
                        toastr.success(response.message)
                        ModifiersPaginationAjax(1);
                    }
                    else {
                        toastr.error(response.message)
                    }
                },
                error: function () {
                    console.log("Modifier not deleted!");
                }
            });
        });
    </script>

}